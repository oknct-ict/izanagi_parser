%semantic double

%token <expression>	INTEGER_LITERAL
%token <expression>	FLOAT_LITERAL
%token <expression> STRING_LITERAL
%token <identifier>	IDENTIFIER

%token NUMBER
%token DIM
%token AS
%token IF
%token ELSEIF
%token ELSE
%token SELECT
%token CASE
%token WHILE
%token END
%token RETURN
%token BREAK

%token FUNCTION

%token ADD
%token SUB
%token MUL
%token DIV
%token MOD
%token ASSIGN

%token AND
%token OR
%token NOT
%token EQ
%token NEQ
%token GT
%token GE
%token LT
%token LE

%left '+' '-'
%left '*' '/'

%%

/* -> of BNF is changed to : */
input		: /* empty */
			| input line '\n' { }
			;

line		: /* empty */	{ System.exit(0); }
			| expr			{ System.out.printf("%g%n", $1); }
			;

expr		: expr '+' expr		{ $$ = $1 + $3; }
			| expr '-' expr		{ $$ = $1 - $3; }
			| expr '*' expr		{ $$ = $1 * $3; }
			| expr '/' expr		{ $$ = $1 / $3; }
			| '(' expr ')'		{ $$ = $2; }
			| NUMBER			{ $$ = $1; }
			;

%%

IzanagiParser(IzanagiLexer l)
{
	lexer = l;
}

private IzanagiLexer lexer;

private void yyerror(String msg)
{
    System.out.println("error : " + msg);
    System.exit(1);
}
